name: Codespace Automation

on:
  workflow_dispatch:  # Permite ejecuci√≥n manual
  schedule:
    - cron: '0 8 * * 1-5'  # Ejecutar d√≠as laborables a las 8 AM

jobs:
  codespace-task:
    runs-on: ubuntu-latest
    steps:
      - name: Listar Codespaces y obtener informaci√≥n
        id: get-codespace-info
        run: |
          echo "Buscando codespace para el repositorio ${{ github.repository }}..."
          
          response=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/user/codespaces")
          
          # Usar jq para encontrar el codespace de este repositorio y extraer su nombre
          # Filtramos por el repositorio y tomamos el primer resultado (.codespaces[0])
          codespace_name=$(echo "$response" | jq -r --arg repo "${{ github.repository }}" '.codespaces[] | select(.repository.full_name == $repo) | .name')
          
          if [ -z "$codespace_name" ]; then
            echo "Error: No se encontr√≥ un codespace para el repositorio ${{ github.repository }}"
            exit 1
          fi
          
          echo "Codespace encontrado: $codespace_name"
          echo "codespace_name=$codespace_name" >> $GITHUB_OUTPUT

      - name: Iniciar Codespace
        id: start-codespace
        run: |
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          echo "Iniciando codespace: $CODESPACE_NAME"
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/user/codespaces/$CODESPACE_NAME/start"

      - name: Esperar a que el Codespace est√© disponible
        run: |
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          echo "Esperando a que el codespace '$CODESPACE_NAME' est√© disponible (tiempo m√°ximo: 15 minutos)..."
          
          for i in {1..90}; do
            response=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/user/codespaces/$CODESPACE_NAME")
            
            status=$(echo "$response" | jq -r '.state')
            echo "Intento $i: Estado actual es '$status'"
            
            if [ "$status" = "Available" ]; then
              echo "‚úÖ Codespace est√° disponible."
              exit 0
            fi
            sleep 10
          done
          
          echo "‚ùå Error: Codespace no estuvo disponible despu√©s de 15 minutos."
          exit 1

      - name: Instalar y Autenticar el CLI de GitHub
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          # Instalar gh CLI (aunque ya est√©, es una buena pr√°ctica)
          sudo apt-get update && sudo apt-get install -y gh
          
          # Autenticar
          echo "${GH_TOKEN}" | gh auth login --with-token
          
          # --- PASO DE DEPURACI√ìN A√ëADIDO ---
          # Verificar el estado de la autenticaci√≥n y los scopes del token
          echo "Verificando los scopes del token..."
          gh auth status -t
          # ----------------------------------
          
          echo "‚úÖ CLI de GitHub autenticado. Verificando acceso a codespaces..."
          gh codespace list

      - name: Ejecutar comandos en el Codespace con gh CLI
        run: |
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          echo "Ejecutando comandos en el codespace: $CODESPACE_NAME"
          
          # El comando 'gh codespace exec' se encarga de la conexi√≥n
          # La sintaxis es: gh codespace exec -c <codespace_name> -- <comando>
          
          # Comando 1: Navegar al directorio y listar contenido
          echo "üìÇ Ejecutando comando 1: Listar contenido del directorio"
          gh codespace exec -c "$CODESPACE_NAME" -- bash -c "cd /workspaces/GLMCookies && ls -la"
          
          # Comando 2: Verificar versi√≥n de Python
          echo "üêç Ejecutando comando 2: Verificar versi√≥n de Python"
          gh codespace exec -c "$CODESPACE_NAME" -- python --version
          
          # Comando 3: Instalar dependencias
          echo "üì¶ Ejecutando comando 3: Instalar dependencias"
          gh codespace exec -c "$CODESPACE_NAME" -- bash -c "cd /workspaces/GLMCookies && pip install -r requirements.txt"
          
          echo "‚úÖ Todos los comandos se ejecutaron."

      - name: Detener Codespace
        if: always() # Este paso se ejecuta siempre, incluso si los anteriores fallan
        run: |
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          echo "üõë Deteniendo el codespace: $CODESPACE_NAME..."
          # Usamos gh CLI para detenerlo, que es m√°s confiable
          echo "${{ secrets.PAT }}" | gh auth login --with-token
          gh codespace stop -c "$CODESPACE_NAME"
          echo "Codespace detenido."
