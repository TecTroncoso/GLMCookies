name: Codespace Automation

on:
  workflow_dispatch:  # Permite ejecuci√≥n manual
  schedule:
    - cron: '0 8 * * 1-5'  # Ejecutar d√≠as laborables a las 8 AM

jobs:
  codespace-task:
    runs-on: ubuntu-latest
    steps:
      - name: Listar Codespaces disponibles
        id: list-codespaces
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            try {
              const response = await github.request('GET /user/codespaces');
              console.log('Codespaces disponibles:');
              response.data.codespaces.forEach(codespace => {
                console.log(`- Nombre: ${codespace.name}, ID: ${codespace.id}, Estado: ${codespace.state}, Repositorio: ${codespace.repository.full_name}`);
              });
              
              // Buscar el codespace para este repositorio
              const targetCodespace = response.data.codespaces.find(c => 
                c.repository.full_name === '${{ github.repository }}'
              );
              
              if (targetCodespace) {
                console.log(`\nCodespace encontrado: ${targetCodespace.name} (ID: ${targetCodespace.id})`);
                // Devolver tanto el nombre como el ID
                return JSON.stringify({
                  name: targetCodespace.name,
                  id: targetCodespace.id
                });
              } else {
                console.log('\nNo se encontr√≥ un codespace para este repositorio');
                return null;
              }
            } catch (error) {
              console.log('Error listando codespaces: ', error);
              throw error;
            }

      - name: Verificar si se encontr√≥ el codespace
        if: steps.list-codespaces.outputs.result == 'null'
        run: |
          echo "Error: No se encontr√≥ un codespace para el repositorio ${{ github.repository }}"
          echo "Por favor, verifica que exista un codespace activo para este repositorio"
          exit 1

      - name: Extraer informaci√≥n del codespace
        id: extract-codespace-info
        run: |
          CODESPACE_INFO='${{ steps.list-codespaces.outputs.result }}'
          CODESPACE_NAME=$(echo "$CODESPACE_INFO" | jq -r '.name')
          CODESPACE_ID=$(echo "$CODESPACE_INFO" | jq -r '.id')
          echo "codespace_name=$CODESPACE_NAME" >> $GITHUB_OUTPUT
          echo "codespace_id=$CODESPACE_ID" >> $GITHUB_OUTPUT
          echo "Codespace: $CODESPACE_NAME (ID: $CODESPACE_ID)"

      - name: Iniciar Codespace usando el ID
        id: start-codespace
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const codespaceId = "${{ steps.extract-codespace-info.outputs.codespace_id }}";
            try {
              console.log(`Iniciando codespace con ID: ${codespaceId}`);
              const response = await github.request(
                'POST /user/codespaces/{codespace_id}/start', {
                  codespace_id: codespaceId
                }
              );
              console.log('Codespace iniciado: ', response.data);
              return response.status;
            } catch (error) {
              console.log('Error iniciando codespace: ', error);
              throw error;
            }

      - name: Esperar a que el Codespace est√© disponible
        run: |
          echo "Esperando a que el codespace est√© disponible (tiempo m√°ximo: 15 minutos)..."
          CODESPACE_ID="${{ steps.extract-codespace-info.outputs.codespace_id }}"
          
          # Aumentar el tiempo de espera a 15 minutos (90 intentos de 10 segundos)
          for i in {1..90}; do
            echo "=== Intento $i de 90 ==="
            echo "Verificando estado del codespace..."
            
            # Obtener la respuesta completa usando el ID
            response=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            "https://api.github.com/user/codespaces/$CODESPACE_ID")
            
            # Mostrar la respuesta para depuraci√≥n (solo los primeros 200 caracteres)
            echo "Respuesta de la API: ${response:0:200}..."
            
            # Extraer el estado usando jq
            status=$(echo "$response" | jq -r '.state // "unknown"')
            
            echo "Estado del codespace: $status"
            
            if [ "$status" = "Available" ]; then
              echo "‚úÖ Codespace est√° disponible despu√©s de $((i*10)) segundos"
              break
            fi
            
            # Mostrar progreso cada 10 intentos (cada ~1.7 minutos)
            if (( i % 10 == 0 )); then
              elapsed_minutes=$((i/6))
              echo "‚è≥ Tiempo transcurrido: ${elapsed_minutes} minutos"
            fi
            
            echo "Esperando 10 segundos antes del pr√≥ximo intento..."
            sleep 10
          done
          
          if [ "$status" != "Available" ]; then
            echo "‚ùå Error: Codespace no est√° disponible despu√©s de 15 minutos"
            echo "√öltimo estado conocido: $status"
            exit 1
          fi

      - name: Obtener detalles del Codespace
        id: codespace-details
        run: |
          CODESPACE_ID="${{ steps.extract-codespace-info.outputs.codespace_id }}"
          response=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
          "https://api.github.com/user/codespaces/$CODESPACE_ID")
          
          # Extraer informaci√≥n importante usando jq
          machine_name=$(echo "$response" | jq -r '.machine_display_name // "unknown"')
          created_at=$(echo "$response" | jq -r '.created_at // "unknown"')
          
          echo "machine_name=$machine_name" >> $GITHUB_OUTPUT
          echo "created_at=$created_at" >> $GITHUB_OUTPUT
          echo "Detalles del Codespace:"
          echo "M√°quina: $machine_name"
          echo "Creado: $created_at"

      - name: Ejecutar comandos en el Codespace
        run: |
          echo "Ejecutando comandos en el codespace..."
          CODESPACE_ID="${{ steps.extract-codespace-info.outputs.codespace_id }}"
          
          # Comando 1: Navegar al directorio y listar contenido
          echo "üìÇ Ejecutando comando 1: Listar contenido del directorio"
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"command":"cd /workspaces/GLMCookies && ls -la", "working_directory":"/workspaces/GLMCookies"}' \
            "https://api.github.com/user/codespaces/$CODESPACE_ID/commands" || echo "Comando 1 ejecutado"
          
          sleep 5
          
          # Comando 2: Verificar versi√≥n de Python
          echo "üêç Ejecutando comando 2: Verificar versi√≥n de Python"
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"command":"python --version", "working_directory":"/workspaces/GLMCookies"}' \
            "https://api.github.com/user/codespaces/$CODESPACE_ID/commands" || echo "Comando 2 ejecutado"
          
          # Comando 3: Instalar dependencias (si existe requirements.txt)
          echo "üì¶ Ejecutando comando 3: Instalar dependencias"
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"command":"pip install -r requirements.txt", "working_directory":"/workspaces/GLMCookies"}' \
            "https://api.github.com/user/codespaces/$CODESPACE_ID/commands" || echo "Comando 3 ejecutado"

      - name: Detener Codespace
        if: always()
        run: |
          CODESPACE_ID="${{ steps.extract-codespace-info.outputs.codespace_id }}"
          echo "üõë Deteniendo el codespace..."
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/user/codespaces/$CODESPACE_ID/stop" || echo "Codespace detenido"
