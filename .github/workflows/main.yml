name: Weekly Codespace Automation

on:
  schedule:
    # Ejecuta cada lunes a las 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Permite ejecuci√≥n manual

env:
  COMMAND_TO_RUN: "npm test" # Reemplaza con el comando que quieres ejecutar

jobs:
  manage-codespace:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          gh --version
        env:
          GITHUB_TOKEN: ${{ secrets.CODESPACES_TOKEN }}

      - name: Detect and Start Codespace
        id: start-codespace
        run: |
          echo "üîç Detecting codespaces for this repository..."
          
          # Obtener el owner y nombre del repo actual
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          
          echo "Repository: $REPO_OWNER/$REPO_NAME"
          
          # Listar todos los codespaces y filtrar por el repositorio actual
          CODESPACE_NAME=$(gh codespace list --json name,repository --jq ".[] | select(.repository == \"$REPO_OWNER/$REPO_NAME\") | .name" | head -n 1)
          
          if [ -z "$CODESPACE_NAME" ]; then
            echo "‚ùå No codespace found for this repository"
            echo "Available codespaces:"
            gh codespace list
            exit 1
          fi
          
          echo "‚úÖ Found codespace: $CODESPACE_NAME"
          echo "CODESPACE_NAME=$CODESPACE_NAME" >> $GITHUB_OUTPUT
          
          # Verificar el estado actual
          CURRENT_STATUS=$(gh codespace view --json state --jq '.state' <<< "$CODESPACE_NAME" 2>/dev/null || echo "Unknown")
          echo "Current codespace status: $CURRENT_STATUS"
          
          if [ "$CURRENT_STATUS" = "Available" ]; then
            echo "‚úÖ Codespace is already running"
          else
            echo "üöÄ Starting codespace: $CODESPACE_NAME"
            # Para GitHub CLI 2.x, necesitamos usar el comando interactivo o especificar directamente
            echo "$CODESPACE_NAME" | gh codespace start || {
              echo "‚ùå Failed to start codespace"
              gh codespace list
              exit 1
            }
            
            # Esperar a que el codespace est√© completamente activo
            echo "‚è≥ Waiting for codespace to be ready..."
            sleep 30
            
            # Verificar el estado con reintentos
            for i in {1..6}; do
              # Usar el nombre del codespace en el comando view
              STATUS=$(gh codespace view --json state --jq '.state' <<< "$CODESPACE_NAME" 2>/dev/null || echo "Starting")
              echo "Attempt $i/6 - Codespace status: $STATUS"
              
              if [ "$STATUS" = "Available" ]; then
                echo "‚úÖ Codespace is ready!"
                break
              fi
              
              if [ $i -eq 6 ]; then
                echo "‚ùå Codespace failed to start after multiple attempts"
                exit 1
              fi
              
              echo "‚è≥ Waiting 30 more seconds..."
              sleep 30
            done
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.CODESPACES_TOKEN }}

      - name: Execute command in Codespace
        id: execute-command
        run: |
          CODESPACE_NAME="${{ steps.start-codespace.outputs.CODESPACE_NAME }}"
          echo "üìã Executing command in codespace: $COMMAND_TO_RUN"
          
          # Ejecutar el comando en el codespace usando input piping
          echo "$CODESPACE_NAME" | gh codespace ssh -- "$COMMAND_TO_RUN"
          
          # Capturar el c√≥digo de salida
          COMMAND_EXIT_CODE=$?
          echo "Command exit code: $COMMAND_EXIT_CODE"
          
          if [ $COMMAND_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Command executed successfully"
          else
            echo "‚ùå Command failed with exit code: $COMMAND_EXIT_CODE"
            exit $COMMAND_EXIT_CODE
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.CODESPACES_TOKEN }}

      - name: Stop Codespace
        if: always() # Ejecuta incluso si los pasos anteriores fallan
        run: |
          CODESPACE_NAME="${{ steps.start-codespace.outputs.CODESPACE_NAME }}"
          
          if [ -z "$CODESPACE_NAME" ]; then
            echo "‚ö†Ô∏è No codespace name available, skipping stop"
            exit 0
          fi
          
          echo "üõë Stopping codespace: $CODESPACE_NAME"
          echo "$CODESPACE_NAME" | gh codespace stop || {
            echo "‚ö†Ô∏è Failed to stop codespace, but continuing..."
          }
          
          # Verificar que se haya detenido
          sleep 10
          STATUS=$(gh codespace view --json state --jq '.state' <<< "$CODESPACE_NAME" 2>/dev/null || echo "unknown")
          echo "Final codespace status: $STATUS"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send notification on failure
        if: failure()
        run: |
          echo "üö® Workflow failed! Check the logs for details."
          # Aqu√≠ podr√≠as agregar notificaciones adicionales como Slack, email, etc.
          
      - name: Send success notification
        if: success()
        run: |
          echo "‚úÖ Weekly codespace automation completed successfully!"
