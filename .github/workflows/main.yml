name: Codespace Automation

on:
  workflow_dispatch:  # Permite ejecuci√≥n manual
  schedule:
    - cron: '0 8 * * 1-5'  # Ejecutar d√≠as laborables a las 8 AM

jobs:
  codespace-task:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup GitHub CLI
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install GitHub CLI
        run: |
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
          
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.PAT }}" | gh auth login --with-token
          
      - name: Listar Codespaces y obtener informaci√≥n
        id: get-codespace-info
        run: |
          echo "Buscando codespace para el repositorio ${{ github.repository }}..."
          
          # Obtener la lista de codespaces
          response=$(gh codespace list --json name,repository,state,displayName)
          
          # Mostrar la respuesta para depuraci√≥n
          echo "Respuesta de codespaces:"
          echo "$response" | jq .
          
          # Extraer el nombre del codespace para este repositorio
          codespace_name=$(echo "$response" | jq -r ".[] | select(.repository == \"${{ github.repository }}\") | .name")
          codespace_display=$(echo "$response" | jq -r ".[] | select(.repository == \"${{ github.repository }}\") | .displayName")
          codespace_state=$(echo "$response" | jq -r ".[] | select(.repository == \"${{ github.repository }}\") | .state")
          
          if [ "$codespace_name" = "null" ] || [ -z "$codespace_name" ]; then
            echo "Error: No se encontr√≥ un codespace para el repositorio ${{ github.repository }}"
            exit 1
          fi
          
          echo "Codespace encontrado: $codespace_name"
          echo "Display Name: $codespace_display"
          echo "Estado actual: $codespace_state"
          echo "codespace_name=$codespace_name" >> $GITHUB_OUTPUT
          echo "codespace_display=$codespace_display" >> $GITHUB_OUTPUT
          echo "codespace_state=$codespace_state" >> $GITHUB_OUTPUT

      - name: Iniciar Codespace (si est√° apagado)
        if: steps.get-codespace-info.outputs.codespace_state != 'Available'
        run: |
          echo "Iniciando codespace: ${{ steps.get-codespace-info.outputs.codespace_name }}"
          gh codespace start -c "${{ steps.get-codespace-info.outputs.codespace_name }}"

      - name: Esperar a que el Codespace est√© disponible (si se inici√≥)
        if: steps.get-codespace-info.outputs.codespace_state != 'Available'
        run: |
          echo "Esperando a que el codespace est√© disponible (tiempo m√°ximo: 15 minutos)..."
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          
          for i in {1..90}; do
            echo "=== Intento $i de 90 ==="
            
            # Verificar estado del codespace
            status=$(gh codespace list --json name,state | jq -r ".[] | select(.name == \"$CODESPACE_NAME\") | .state")
            
            echo "Estado del codespace: $status"
            
            if [ "$status" = "Available" ]; then
              echo "‚úÖ Codespace est√° disponible despu√©s de $((i*10)) segundos"
              break
            fi
            
            if (( i % 10 == 0 )); then
              elapsed_minutes=$((i/6))
              echo "‚è≥ Tiempo transcurrido: ${elapsed_minutes} minutos"
            fi
            
            sleep 10
          done
          
          if [ "$status" != "Available" ]; then
            echo "‚ùå Error: Codespace no est√° disponible despu√©s de 15 minutos"
            exit 1
          fi

      - name: Ejecutar comandos usando lifecycle commands
        run: |
          echo "Configurando comandos autom√°ticos en el codespace..."
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          
          # Obtener detalles del codespace para ver la configuraci√≥n actual
          echo "Obteniendo configuraci√≥n actual del codespace..."
          gh codespace view -c "$CODESPACE_NAME"
          
          # Nota: Los comandos deben ejecutarse a trav√©s del ciclo de vida del contenedor
          # o mediante la reconstrucci√≥n del codespace con los comandos apropiados
          echo "Para ejecutar comandos autom√°ticamente, reconstruye el codespace con:"
          echo "1. Agrega 'postStartCommand' a tu devcontainer.json"
          echo "2. O usa 'gh codespace rebuild' para aplicar los cambios"

      - name: Mostrar instrucciones para configuraci√≥n manual
        run: |
          echo "üìã INSTRUCCIONES PARA CONFIGURAR COMANDOS AUTOM√ÅTICOS:"
          echo ""
          echo "Opci√≥n 1: Agregar SSH server (recomendado)"
          echo "------------------------------------------"
          echo "Agrega esto a tu .devcontainer/devcontainer.json:"
          echo '{
  "features": {
    "ghcr.io/devcontainers/features/sshd:1": {
      "version": "latest"
    }
  }
}'
          echo ""
          echo "Luego reconstruye tu codespace:"
          echo "gh codespace rebuild -c NOMBRE_DEL_CODESPACE"
          echo ""
          echo "Opci√≥n 2: Usar comandos de ciclo de vida"
          echo "----------------------------------------"
          echo "Agrega esto a tu .devcontainer/devcontainer.json:"
          echo '{
  "postStartCommand": "cd /workspaces/GLMCookies && ls -la && python --version && pip install -r requirements.txt"
}'
          echo ""
          echo "Opci√≥n 3: Ejecutar manualmente"
          echo "--------------------------------"
          echo "Con√©ctate al codespace manualmente:"
          echo "gh codespace code -c NOMBRE_DEL_CODESPACE"
          echo ""
          echo "Y ejecuta los comandos en la terminal integrada."

      - name: Detener Codespace
        if: always()
        run: |
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          echo "üõë Deteniendo el codespace..."
          gh codespace stop -c "$CODESPACE_NAME"
