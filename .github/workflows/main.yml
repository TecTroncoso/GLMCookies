name: Codespace Automation

on:
  workflow_dispatch:  # Permite ejecuci√≥n manual
  schedule:
    - cron: '0 8 * * 1-5'  # Ejecutar d√≠as laborables a las 8 AM

jobs:
  codespace-task:
    runs-on: ubuntu-latest
    steps:
      - name: Listar Codespaces y obtener informaci√≥n
        id: get-codespace-info
        run: |
          echo "Buscando codespace para el repositorio ${{ github.repository }}..."
          response=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/user/codespaces")
          
          codespace_name=$(echo "$response" | jq -r --arg repo "${{ github.repository }}" '.codespaces[] | select(.repository.full_name == $repo) | .name')
          
          if [ -z "$codespace_name" ]; then
            echo "Error: No se encontr√≥ un codespace para el repositorio ${{ github.repository }}"
            exit 1
          fi
          
          echo "Codespace encontrado: $codespace_name"
          echo "codespace_name=$codespace_name" >> $GITHUB_OUTPUT

      - name: Iniciar Codespace
        id: start-codespace
        run: |
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          echo "Iniciando codespace: $CODESPACE_NAME"
          curl -f -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/user/codespaces/$CODESPACE_NAME/start"

      - name: Esperar a que el Codespace est√© disponible
        run: |
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          echo "Esperando a que el codespace '$CODESPACE_NAME' est√© disponible (tiempo m√°ximo: 15 minutos)..."
          
          for i in {1..90}; do
            response=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/user/codespaces/$CODESPACE_NAME")
            
            status=$(echo "$response" | jq -r '.state')
            echo "Intento $i: Estado actual es '$status'"
            
            if [ "$status" = "Available" ]; then
              echo "‚úÖ Codespace est√° disponible."
              exit 0
            fi
            sleep 10
          done
          
          echo "‚ùå Error: Codespace no estuvo disponible despu√©s de 15 minutos."
          exit 1

      # --- BLOQUE DE AUTENTICACI√ìN MEJORADO (DEL SEGUNDO C√ìDIGO) ---
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
          
      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "${GH_TOKEN}" | gh auth login --with-token
          echo "‚úÖ CLI de GitHub autenticado."
      # --- FIN DEL BLOQUE DE AUTENTICACI√ìN ---

      - name: Ejecutar comandos en el Codespace con gh CLI
        run: |
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          echo "Ejecutando comandos en el codespace: $CODESPACE_NAME"
          
          # Comando 1: Listar contenido del directorio
          # NOTA: Tu segundo c√≥digo usaba 'gh codespace ssh', que tambi√©n es excelente.
          # He mantenido 'gh codespace exec' del primer c√≥digo, pero ambos son v√°lidos.
          echo "üìÇ Ejecutando comando 1: Listar contenido del directorio"
          gh codespace exec -c "$CODESPACE_NAME" -- bash -c "cd /workspaces/GLMCookies && ls -la"
          
          # Comando 2: Verificar versi√≥n de Python
          echo "üêç Ejecutando comando 2: Verificar versi√≥n de Python"
          gh codespace exec -c "$CODESPACE_NAME" -- python --version
          
          # Comando 3: Instalar dependencias
          echo "üì¶ Ejecutando comando 3: Instalar dependencias"
          gh codespace exec -c "$CODESPACE_NAME" -- bash -c "cd /workspaces/GLMCookies && pip install -r requirements.txt"
          
          echo "‚úÖ Todos los comandos se ejecutaron."

      - name: Detener Codespace
        if: always() # Este paso se ejecuta siempre
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          CODESPACE_NAME="${{ steps.get-codespace-info.outputs.codespace_name }}"
          echo "üõë Deteniendo el codespace: $CODESPACE_NAME..."
          # No es estrictamente necesario volver a autenticar, pero no hace da√±o.
          echo "${GH_TOKEN}" | gh auth login --with-token
          gh codespace stop -c "$CODESPACE_NAME"
          echo "Codespace detenido."
